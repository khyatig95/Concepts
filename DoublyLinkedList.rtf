{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red127\green0\blue85;\red42\green0\blue255;\red100\green70\blue50;
\red0\green80\blue50;\red0\green0\blue192;\red63\green127\blue95;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs24 \cf2 #include
\f1\b0 \cf0  \cf3 <iostream>\cf0  \

\f0\b \cf2 using
\f1\b0 \cf0  
\f0\b \cf2 namespace
\f1\b0 \cf0  std; \
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 class
\f1\b0 \cf0  \cf5 Node\cf0  \{\
    
\f0\b \cf2 public
\f1\b0 \cf0  :\
        \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* \cf6 next\cf0 ;\
        \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* \cf6 prev\cf0 ;\
        
\f0\b \cf4 T
\f1\b0 \cf0  \cf6 data\cf0 ;\
        
\f0\b Node
\f1\b0 () \{ \cf7 //You can even \cf7 \ul \ulc7 paramterize\cf7 \ulnone  the constructor to pass the \cf7 \ul \ulc7 val\cf7 \ulnone  here directly\cf0 \
            \cf6 next\cf0  = NULL;\
            \cf6 prev\cf0  = NULL;\
        \}\
\};\
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 class
\f1\b0 \cf0  \cf5 DoublyLinkedList\cf0  \{\
    
\f0\b \cf2 public
\f1\b0 \cf0  :\
        
\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b insertNodeHead
\f1\b0 (
\f0\b \cf4 T
\f1\b0 \cf0  val); \cf7 //Add to the head. Create Memory\cf0 \
        
\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b insertNodeTail
\f1\b0 (
\f0\b \cf4 T
\f1\b0 \cf0  val); \cf7 //Add to the tail. Create Memory\cf0 \
        
\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b deleteNodewithVal
\f1\b0 (
\f0\b \cf4 T
\f1\b0 \cf0  val);   \cf7 //Delete assigned Memory\cf0 \
        
\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b deleteNode
\f1\b0 (\cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* node); \cf7 //Delete assigned Memory\cf0 \
        
\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b printLinkedList
\f1\b0 ();\
        
\f0\b DoublyLinkedList
\f1\b0 () \{\
            \cf6 head\cf0  = NULL; \
            \cf6 tail\cf0  = NULL;\
        \}\
        \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* \cf6 head\cf0 ;\
        \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* \cf6 tail\cf0 ;\
\};\
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b DoublyLinkedList<T> :: insertNodeHead
\f1\b0 (
\f0\b \cf4 T
\f1\b0 \cf0  val) \{\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* n = 
\f0\b \cf2 new
\f1\b0 \cf0  \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >(); \cf7 //Assign Memory\cf0 \
    n->\cf6 data\cf0  = val;\
    n->\cf6 prev\cf0  = NULL;\
    n->\cf6 next\cf0  = \cf6 head\cf0 ;\
    
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 head\cf0  == NULL)\
        \cf6 tail\cf0  = n;\
    
\f0\b \cf2 else
\f1\b0 \cf0  \
        \cf6 head\cf0 ->\cf6 prev\cf0  = n; \cf7 //Update the \cf7 \ul \ulc7 prev\cf7 \ulnone  of  previous head\cf0 \
    \cf6 head\cf0  = n; \cf7 //Update the head\cf0 \
    cout << \cf3 "Insert data at head "\cf0 << \cf6 head\cf0 ->\cf6 data\cf0  << endl;\
\
\}\
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b DoublyLinkedList<T> :: insertNodeTail
\f1\b0 (
\f0\b \cf4 T
\f1\b0 \cf0  val) \{\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* n = 
\f0\b \cf2 new
\f1\b0 \cf0  \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >(); \cf7 //Assign Memory\cf0 \
    n->\cf6 data\cf0  = val;\
    n->\cf6 next\cf0  = NULL;\
    n->\cf6 prev\cf0  = \cf6 tail\cf0 ;\
    
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 tail\cf0  == NULL)\
        \cf6 head\cf0  = n;\
    
\f0\b \cf2 else
\f1\b0 \cf0  \
        \cf6 tail\cf0 ->\cf6 next\cf0  = n; \cf7 //Update next of the previous tail\cf0 \
    \cf6 tail\cf0  = n; \cf7 //Update the tail\cf0 \
    cout << \cf3 "Insert data at tail "\cf0 << \cf6 tail\cf0 ->\cf6 data\cf0  << endl;\
\}\
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b DoublyLinkedList<T> :: deleteNodewithVal
\f1\b0 (
\f0\b \cf4 T
\f1\b0 \cf0  val) \{\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* n = \cf6 head\cf0 ;\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* ptr;\
    
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 head\cf0  == NULL)\
        
\f0\b \cf2 return
\f1\b0 \cf0 ;\
\
    
\f0\b \cf2 while
\f1\b0 \cf0 (n->\cf6 next\cf0 ->\cf6 next\cf0  != NULL) \{ \cf7 //Starting from head->next to tail->\cf7 \ul \ulc7 prev\cf0 \ulnone \
        cout << \cf3 "Processing data "\cf0  << n->\cf6 next\cf0 ->\cf6 data\cf0  << endl;\
        
\f0\b \cf2 if
\f1\b0 \cf0  (n->\cf6 next\cf0 ->\cf6 data\cf0  == val) \{\
            cout << \cf3 "Delete data "\cf0  << n->\cf6 next\cf0 ->\cf6 data\cf0  << endl;\
            ptr = n->\cf6 next\cf0 ;\
            n->\cf6 next\cf0  = n->\cf6 next\cf0 ->\cf6 next\cf0 ;\
            n->\cf6 next\cf0 ->\cf6 prev\cf0  = n;\
            
\f0\b \cf2 delete
\f1\b0 \cf0  ptr;\
            
\f0\b \cf2 continue
\f1\b0 \cf0 ;\
        \}\
        n = n->\cf6 next\cf0 ;\
    \}\
    \
            \cf7 //Process head\cf0 \
    
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 head\cf0 ->\cf6 data\cf0  == val) \{\
        ptr = \cf6 head\cf0 ;\
        cout << \cf3 "The element at head will be deleted "\cf0  << \cf6 head\cf0 ->\cf6 data\cf0  << endl;\
        
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 head\cf0 ->\cf6 next\cf0  != NULL) \{\
            \cf6 head\cf0  = \cf6 head\cf0 ->\cf6 next\cf0 ;\
            \cf6 head\cf0 ->\cf6 prev\cf0  = NULL;\
        \} 
\f0\b \cf2 else
\f1\b0 \cf0  \{\
            \cf6 head\cf0  = NULL;\
            \cf6 tail\cf0  = NULL;\
        \}\
        
\f0\b \cf2 delete
\f1\b0 \cf0  ptr;\
    \}\
    \cf7 //Process tail\cf0 \
    
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 tail\cf0 ->\cf6 data\cf0  == val) \{\
        ptr = \cf6 tail\cf0 ;\
        cout << \cf3 "The element at tail will be deleted "\cf0  << \cf6 tail\cf0 ->\cf6 data\cf0  << endl;\
        
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 tail\cf0 ->\cf6 prev\cf0  != NULL) \{\
            \cf6 tail\cf0  = \cf6 tail\cf0 ->\cf6 prev\cf0 ;\
            \cf6 tail\cf0 ->\cf6 next\cf0  = NULL;\
        \} 
\f0\b \cf2 else
\f1\b0 \cf0  \{\
            \cf6 head\cf0  = NULL;\
            \cf6 tail\cf0  = NULL;\
        \}\
        
\f0\b \cf2 delete
\f1\b0 \cf0  ptr;\
    \}\
\}\
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b DoublyLinkedList<T> :: deleteNode
\f1\b0 (\cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* node) \{\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* n = \cf6 head\cf0 ;\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* ptr;\
    
\f0\b \cf2 if
\f1\b0 \cf0  (node == NULL || \cf6 head\cf0  == NULL || \cf6 tail\cf0  == NULL) \
        
\f0\b \cf2 return
\f1\b0 \cf0 ;\
        \
    \cf7 //Process head\cf0 \
    
\f0\b \cf2 if
\f1\b0 \cf0  (node == \cf6 head\cf0 ) \{\
        cout << \cf3 "Delete head with data "\cf0  << \cf6 head\cf0 ->\cf6 data\cf0  << endl;\
        ptr = \cf6 head\cf0 ;\
        
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 head\cf0 ->\cf6 next\cf0  != NULL) \{\
            \cf6 head\cf0  = \cf6 head\cf0 ->\cf6 next\cf0 ;\
            \cf6 head\cf0 ->\cf6 prev\cf0  = NULL;\
        \} 
\f0\b \cf2 else
\f1\b0 \cf0  \{\
            \cf6 head\cf0  = NULL;\
            \cf6 tail\cf0  = NULL;\
        \}\
        
\f0\b \cf2 delete
\f1\b0 \cf0  ptr;\
        
\f0\b \cf2 return
\f1\b0 \cf0 ;\
    \}\
    \cf7 //Process tail\cf0 \
    
\f0\b \cf2 if
\f1\b0 \cf0  (node == \cf6 tail\cf0 ) \{\
        cout << \cf3 "Delete tail with data "\cf0  << \cf6 tail\cf0 ->\cf6 data\cf0  << endl;\
        ptr = \cf6 tail\cf0 ;\
        
\f0\b \cf2 if
\f1\b0 \cf0  (\cf6 tail\cf0 ->\cf6 prev\cf0  != NULL) \{\
            \cf6 tail\cf0  = \cf6 tail\cf0 ->\cf6 prev\cf0 ;\
            \cf6 tail\cf0 ->\cf6 next\cf0  = NULL;\
        \} 
\f0\b \cf2 else
\f1\b0 \cf0  \{\
            \cf6 tail\cf0  = NULL;\
            \cf6 head\cf0  = NULL;\
         \}\
        
\f0\b \cf2 delete
\f1\b0 \cf0  ptr;\
        
\f0\b \cf2 return
\f1\b0 \cf0 ;\
    \}\
    \
    
\f0\b \cf2 while
\f1\b0 \cf0 (n->\cf6 next\cf0 ->\cf6 next\cf0  != NULL) \{\
        
\f0\b \cf2 if
\f1\b0 \cf0  (n->\cf6 next\cf0  == node) \{\
            cout << \cf3 "Delete node with data "\cf0  << n->\cf6 next\cf0 ->\cf6 data\cf0  << endl;\
            ptr = n->\cf6 next\cf0 ;\
            n->\cf6 next\cf0  = n->\cf6 next\cf0 ->\cf6 next\cf0 ;\
            n->\cf6 next\cf0 ->\cf6 prev\cf0  = n;\
            
\f0\b \cf2 delete
\f1\b0 \cf0  ptr;\
            
\f0\b \cf2 return
\f1\b0 \cf0 ;\
        \}\
        n = n->\cf6 next\cf0 ;\
    \}\
\
\
\}\
\

\f0\b \cf2 template
\f1\b0 \cf0  <
\f0\b \cf2 typename
\f1\b0 \cf0  
\f0\b \cf4 T
\f1\b0 \cf0 >\

\f0\b \cf2 void
\f1\b0 \cf0  
\f0\b DoublyLinkedList<T> :: printLinkedList
\f1\b0 () \{\
    \cf5 Node\cf0 <
\f0\b \cf4 T
\f1\b0 \cf0 >* n;\
    cout << \cf3 "Linked list is"\cf0  << endl;\
    n = \cf6 head\cf0 ;\
    
\f0\b \cf2 while
\f1\b0 \cf0  (n != \cf6 tail\cf0 ) \{\
        cout << n->\cf6 data\cf0  << \cf3 "->"\cf0 ;\
        n = n->\cf6 next\cf0 ;\
    \}\
    cout << n->\cf6 data\cf0  << endl; \cf7 //tail\cf0 \
    cout << \cf3 "Reverse Linked list is "\cf0  << endl;\
    n = \cf6 tail\cf0 ;\
    
\f0\b \cf2 while
\f1\b0 \cf0  (n != \cf6 head\cf0 ) \{\
        cout << n->\cf6 data\cf0  << \cf3 "<-"\cf0 ;\
        n = n->\cf6 prev\cf0 ;\
    \}\
    cout << n->\cf6 data\cf0  << endl; \cf7 //head\cf0 \
  \
\}\
\

\f0\b \cf2 int
\f1\b0 \cf0  
\f0\b main
\f1\b0 () \{\
    \cf5 DoublyLinkedList\cf0 <
\f0\b \cf2 int
\f1\b0 \cf0 > lis;\
    lis.insertNodeHead(70);\
    lis.insertNodeTail(100);\
    lis.insertNodeHead(70);\
    lis.insertNodeTail(70);\
    lis.insertNodeHead(70);  \
    lis.printLinkedList();\
    lis.deleteNodewithVal(70);\
    lis.printLinkedList();\
    lis.deleteNode(lis.\cf6 head\cf0 );\
    lis.printLinkedList();\
    
\f0\b \cf2 return
\f1\b0 \cf0  0;\
\}}